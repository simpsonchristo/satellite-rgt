#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Predict Total DV Generated By Different Staged Motors"""
import numpy as np
import astropy.units as u
#custom

"""Python 3.7
   EH Group, Inc. (c) 2019
   Christopher Simpson: christopher.r.simpson@simpsonaerospace.com"""
#------------------------------------------------------------------------------
class motor:
    def __init__(self, Isp, Oxidizer2FuelRatio, OxidizerDensity, FuelDensity, InertMassFraction, MotorName):
        self.Isp = Isp
        self.rho_o = OxidizerDensity
        self.rho_f = FuelDensity
        self.OF = Oxidizer2FuelRatio
        self.fi = InertMassFraction
        self.motor = MotorName

class stage(motor):
    def __init__(self, Length, Diameter):
        self.Len = Length
        self.Dia = Diameter
        self.Vol = self.Len*np.pi*(self.Dia/2)**2
        motor.__init__(self, 
                       Isp                =1, 
                       Oxidizer2FuelRatio =1, 
                       OxidizerDensity    =1, 
                       FuelDensity        =1,
                       InertMassFraction  =1,
                       MotorName = 'HTPB/N2O')
    def m_f(self):
        return (self.rho_o/self.OF)*(1/(1 + self.rho_o/(self.OF*self.rho_f)))*self.Vol
    def m_o(self):
        return (self.rho_o * (self.Vol - (self.m_f()/self.rho_f)))
    def mprop(self):
         return self.m_f() + self.m_o()
    def m_i(self):
         return self.mprop()*self.fi

class payload:
    def __init__(self, RectangleOrCylinder, Length, Width, Height, Diameter, Mass):
        self.RecOrCyl = RectangleOrCylinder
        self.Len = Length
        self.m = Mass
        self.Wid = Width
        self.Hei = Height
        self.Dia = Diameter
    def Vol(self):
        if ((self.RecOrCyl is 'Rectangle') or (self.RecOrCyl is 0) or (self.RecOrCyl is 'rec') or (self.RecOrCyl is 'Rec')):
            holdVol = self.Len*self.Wid*self.Hei
        elif ((self.RecOrCyl is 'Circle') or (self.RecOrCyl is 1) or (self.RecOrCyl is 'cir') or (self.RecOrCyl is 'Cir')):
            holdVol = self.Len*np.pi*(self.Dia/2)**2
        return holdVol
