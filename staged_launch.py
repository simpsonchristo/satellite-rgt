#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Predict Total DV Generated By Different Staged Motors"""
import numpy as np
import astropy.units as u
import matplotlib.pyplot as plt
#custom
from launchVehicles import stage
from launchVehicles import payload

"""Python 3.7
   EH Group, Inc. (c) 2019
   Christopher Simpson: christopher.r.simpson@simpsonaerospace.com"""
#------------------------------------------------------------------------------
def aim120ToSpace(stage_n = 2):
    g0 = (9.81*u.m/(u.s*u.s))
    #staging
    '''Motors are HTPB+N2O, HTPB+LOX, Paraffin+N2O, Paraffin+LOX'''
    stage1 = stage(Length=1.8288*u.m, Diameter=0.254*u.m)
    stage1.Isp   = 225.7*u.s
    stage1.OF    = (0.300/0.077)
    stage1.motor = 'HTPB/N$_2$O'
    stage1.rho_f = 915.0e+3 * (u.g/(u.m*u.m*u.m))
    stage1.rho_o = 772.3e+3 * (u.g/(u.m*u.m*u.m))
    stage1.fi    = 0.100
    
    payloadSection = payload(1, 0.36*u.m, 0.24*u.m, 0.12*u.m, stage1.Dia, np.linspace(5.0e+3,10.0e+3)*u.g)
    
    stage2 = stage(Length=(3.9624*u.m - payloadSection.Len - stage1.Len), Diameter = stage1.Dia)
    stage2.Isp   = np.array([368, 226, 372, (stage1.Isp).value])*u.s
    stage2.OF    = np.array([2.5, stage1.OF, 2.7, stage1.OF])
    stage2.motor = np.array(['HTPB/LOX', 'SP1_a/N$_2$O', 'SP1_a/LOX', stage1.motor])
    stage2.rho_f = np.array([915.0e+3, 920.0e+3, 920.0e+3, (stage1.rho_f).value])* (u.g/(u.m*u.m*u.m))
    stage2.rho_o = np.array([1141.0e+3, 772.3e+3, 1141.0e+3, (stage1.rho_o).value])* (u.g/(u.m*u.m*u.m))
    stage2.fi    = np.array([0.08, 0.08, 0.08, 0.08])
    
    
    missile_DV = np.ones((1,4))
    for i in range(len(payloadSection.m)):
        #DV possible from stage 2
#        DV_stage2 = np.atleast_2d(np.empty((1,4)))
        mi_mf = (payloadSection.m[i] + stage2.m_i() + stage2.mprop())/(payloadSection.m[i])# + stage_2_motor1_minert)
        DV_stage2 = stage2.Isp*g0*np.log(mi_mf)
        
#        DV_stage1 = np.atleast_2d(np.empty((1,4)))
        mi_mf = (stage1.mprop() + stage1.m_i() + payloadSection.m[i] + stage2.m_i() + stage2.mprop())/(payloadSection.m[i] + stage2.m_i() + stage2.mprop())
        DV_stage1 = stage1.Isp*g0*np.log(mi_mf)
        
        holder = np.atleast_2d(DV_stage1 + DV_stage2)
        missile_DV = np.concatenate((missile_DV, holder), axis=0)
    
    missile_DV = np.delete(missile_DV, 0, 0)

    return missile_DV, payloadSection.m

